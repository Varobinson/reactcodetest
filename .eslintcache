[{"/Users/vincentrobinson/Desktop/code/reactcodetest/src/reportWebVitals.js":"1","/Users/vincentrobinson/Desktop/code/reactcodetest/src/App.js":"2","/Users/vincentrobinson/Desktop/code/reactcodetest/src/Components/QCard/QCard.js":"3","/Users/vincentrobinson/Desktop/code/reactcodetest/src/index.js":"4","/Users/vincentrobinson/Desktop/code/reactcodetest/src/data.js":"5","/Users/vincentrobinson/Desktop/code/reactcodetest/src/Components/QCard/ImportedFunctions/Functions.js":"6"},{"size":362,"mtime":1610490906459,"results":"7","hashOfConfig":"8"},{"size":174,"mtime":1610659119451,"results":"9","hashOfConfig":"8"},{"size":4700,"mtime":1610673184029,"results":"10","hashOfConfig":"8"},{"size":500,"mtime":1610558775193,"results":"11","hashOfConfig":"8"},{"size":1249,"mtime":1610659591274,"results":"12","hashOfConfig":"8"},{"size":3111,"mtime":1610673170593,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1uhz190",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"/Users/vincentrobinson/Desktop/code/reactcodetest/src/reportWebVitals.js",[],"/Users/vincentrobinson/Desktop/code/reactcodetest/src/App.js",[],"/Users/vincentrobinson/Desktop/code/reactcodetest/src/Components/QCard/QCard.js",[],"/Users/vincentrobinson/Desktop/code/reactcodetest/src/index.js",[],["28","29"],"/Users/vincentrobinson/Desktop/code/reactcodetest/src/data.js",[],"/Users/vincentrobinson/Desktop/code/reactcodetest/src/Components/QCard/ImportedFunctions/Functions.js",["30"],"import Rout\n\nconst [currentQuestion, setCurrentQuestion] = useState(0);\n\nconst  [previousQuestion] = useState([0])\n\n\n// Functions\n\n    // Goes back 1 question\n    function back() {\n        if(previousQuestion.length > 1){\n            \n            setCurrentQuestion(previousQuestion[previousQuestion.length - 1]) \n            previousQuestion.pop();\n        }\n    }\n\n    // Resets Form to first Question\n    function reset(){\n        setCurrentQuestion(0)\n    }\n\n    // Function updates currentQuestion When button 1 is clicked\n    let updateQ = () => {\n        previousQuestion.push(currentQuestion)\n        \n        if(currentQuestion === 0){\n            setCurrentQuestion(1)\n        }\n        else if(currentQuestion === 1  ){\n            setCurrentQuestion(2)\n        }\n        else if(currentQuestion === 2 ){\n            setCurrentQuestion(3)\n        }       \n        else if(currentQuestion === 4 ){\n            setCurrentQuestion(5)\n        }\n        else if(currentQuestion === 9 ){\n            setCurrentQuestion(10)\n        }\n        else if(currentQuestion === 11 ){\n            setCurrentQuestion(10)\n        }\n        else if(currentQuestion === 5 ){\n            setCurrentQuestion(10)\n        }\n        else if(currentQuestion === 8 ){\n            setCurrentQuestion(10)\n        }\n        else if(currentQuestion === 6 ){\n            setCurrentQuestion(12)\n        }\n        else if(currentQuestion === 8 ){\n            setCurrentQuestion(10)\n        }\n        else if(currentQuestion === 12 ){\n            setCurrentQuestion(10)\n        }\n        else if(currentQuestion === 13 ){\n            setCurrentQuestion(10)\n        }\n\n    }\n\n// Function updates currentQuestion When button 1 is clicked\n    let updateQ2 = () => {\n        previousQuestion.push(currentQuestion)\n        \n        if(currentQuestion === 0){\n            setCurrentQuestion(4)\n        }\n        else if(currentQuestion === 5 ){\n            setCurrentQuestion(3)\n        }\n        else if(currentQuestion === 2 ){\n            setCurrentQuestion(3)\n        }\n        else if(currentQuestion === 9 ){\n            setCurrentQuestion(3)\n        }\n        else if(currentQuestion === 11 ){\n            setCurrentQuestion(3)\n        }\n        else if(currentQuestion === 1 ){\n            setCurrentQuestion(11)\n        }\n        else if(currentQuestion === 6 ){\n            setCurrentQuestion(8)\n        }\n        else if(currentQuestion === 8 ){\n            setCurrentQuestion(3)\n        }\n        else if(currentQuestion === 12 ){\n            setCurrentQuestion(3)\n        }\n        else if(currentQuestion === 4 ){\n            setCurrentQuestion(13)\n        }\n        else if(currentQuestion === 13 ){\n            setCurrentQuestion(3)\n        }\n\n    }\n\n    // Function updates currentQuestion When button 3 is clicked\n    let updateQ3 = () => {\n        previousQuestion.push(currentQuestion)\n        \n        if(currentQuestion === 1){\n            setCurrentQuestion(9)\n        }\n        else if(currentQuestion === 0){\n            setCurrentQuestion(6)\n        }\n   \n    }\n\n    export{ reset, back,updateQ, updateQ2, updateQ3}",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":null,"fatal":true,"severity":2,"message":"35","line":3,"column":1},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"Parsing error: Unexpected token\n\n  1 | import Rout\n  2 | \n> 3 | const [currentQuestion, setCurrentQuestion] = useState(0);\n    | ^\n  4 | \n  5 | const  [previousQuestion] = useState([0])\n  6 |","no-global-assign","no-unsafe-negation"]